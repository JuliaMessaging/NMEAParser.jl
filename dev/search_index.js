var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NMEAParser","category":"page"},{"location":"#NMEAParser","page":"Home","title":"NMEAParser","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NMEAParser.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NMEAParser]","category":"page"},{"location":"#NMEAParser.DTM","page":"Home","title":"NMEAParser.DTM","text":"DTM <: NMEAString\n\nA type that represents a Datum reference (DTM) message, which is one of the types of NMEA messages. NMEA stands for National Marine Electronics Association, and it is a standard protocol for communication between marine electronic devices. A DTM message identifies the local geodetic datum and datum offsets from a reference datum. This sentence is used to define the datum to which a position location, and geographic locations in subsequent sentences, is referenced[^1^][1].\n\nFields\n\nsystem::String: The system identifier, indicating the source of the message (e.g. \"GPS\", \"GLONASS\", \"UNKNOWN\").\nlocal_datum_code::String: The local datum code (CCC), which can be one of the following values[^1^][1]:\nW84 – WGS-84\nW72 – WGS-72\nS85 – SGS85\nP90 – PE90\n999 – User-defined IHO datum code\nlocal_datum_subcode::String: The local datum subdivision code (x).\nlat_offset::Float64: The latitude offset, in minutes (x.x). A negative value indicates south and a positive value indicates north.\nlong_offset::Float64: The longitude offset, in minutes (x.x). A negative value indicates west and a positive value indicates east.\nalt_offset::Float64: The altitude offset, in meters (x.x).\nref_datum::String: The reference datum code (CCC), which can be one of the following values[^1^][1]:\nW84 – WGS-84\nW72 – WGS-72\nS85 – SGS85\nP90 – PE90\n999 – User-defined IHO datum code\nvalid::Bool: A flag indicating whether the message is valid or not.\n\nConstructor\n\nThe constructor takes an array of strings as an argument, which are the items of a DTM sentence. It also takes an optional keyword argument system, which specifies the system identifier. If not given, it defaults to \"UNKNOWN\". Another optional keyword argument is valid, which specifies whether the message is valid or not. If not given, it defaults to true.\n\nExample\n\n$GPDTM,W84,,0.000000,N,0.000000,E,0.0,W84*6F\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.GBS","page":"Home","title":"NMEAParser.GBS","text":"GBS(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true)\n\nA struct that represents a GBS NMEA string, which is a message that contains the error estimates of the position fix from a global navigation satellite system (GNSS).\n\nFields\n\nsystem::String: The name of the system that produced the message.\ntime::Float64: The time of the message in seconds since midnight UTC.\nlat_error::Float64: The expected error in latitude in meters.\nlong_error::Float64: The expected error in longitude in meters.\nalt_error::Float64: The expected error in altitude in meters.\nfailed_PRN::Int: The pseudo-random noise (PRN) number of the satellite that has failed or is likely to fail.\nprob_of_missed::Float64: The probability of missed detection for the failed satellite.\nexcluded_meas_err::Float64: The estimated error caused by excluding the measurement from the failed satellite.\nstandard_deviation::Float64: The standard deviation of the residual errors for all satellites used in the position fix.\nvalid::Bool: A flag that indicates whether the message is valid or not.\n\nConstructor\n\nThe constructor takes an array of strings as an argument, which are the items in the GBS NMEA string. It also takes optional keyword arguments for the system name and the validity flag. It parses the items and assigns them to the corresponding fields.\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.GGA","page":"Home","title":"NMEAParser.GGA","text":"GGA(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true)\n\nA struct that represents a Global Positioning System Fix Data (GGA) sentence from the NMEA protocol. It contains information about the GPS system, time, location, fix quality, number of satellites, horizontal dilution of precision (HDOP), altitude, geoidal separation, age of differential corrections, and differential reference station ID.\n\nArguments\n\nitems::Array{D}: An array of strings that contains the fields of the GGA sentence, separated by commas.\nsystem::AbstractString: An optional keyword argument that specifies the type of GPS system used.   It can be \"GPS\", \"GLONASS\", \"GALILEO\", or \"Combined\". The default value is \"UNKNOWN\".\nvalid::Bool: An optional keyword argument that indicates whether the GGA sentence is valid or not. The default value is true.\n\nReturns\n\nA GGA object with the following fields:\nsystem::String: The type of GPS system used.\ntime::Float64: The UTC time of the fix in seconds.\nlatitude::Float64: The latitude of the position in decimal degrees.\nlongitude::Float64: The longitude of the position in decimal degrees.\nfix_quality::String: The quality of the fix. It can be one of the following values:   \"INVALID\", \"GPS (SPS)\", \"DGPS\", \"PPS\", \"REAL TIME KINEMATIC\", \"FLOAT RTK\",   \"DEAD RECKONING\", \"MANUAL INPUT\", or \"SIMULATION\".\nnum_sats::Int: The number of satellites used in the fix.\nHDOP::Float64: The horizontal dilution of precision (HDOP) of the fix.\naltitude::Float64: The altitude above mean sea level (MSL) in meters.\ngeoidal_seperation::Float64: The difference between the WGS-84 earth ellipsoid and mean sea level (MSL) in meters.\nage_of_differential::Float64: The time since the last SC104 type 1 or 9 update in seconds.   A value of 0 means no differential GPS correction is available.\ndiff_reference_id::Int: The differential reference station ID.\nvalid::Bool: Whether the GGA sentence is valid or not.\n\nThe GGA sentence is one of the most common sentences used with GPS receivers. It contains information about position, elevation, time, number of satellites used, fix type, and correction age. The message ID for the GGA sentence is “GGA”. Here is an example of a GGA sentence:\n\n$GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47\n\nThis means that the GPS receiver reported its position as 48 degrees 7.038 minutes north latitude and 11 degrees 31.000 minutes east longitude at 12:35:19 UTC on the current date. The fix type was GPS (SPS), with 8 satellites used and a horizontal dilution of precision (HDOP) of 0.9. The altitude above mean sea level (MSL) was 545.4 meters, and the geoidal separation was 46.9 meters\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.GLL","page":"Home","title":"NMEAParser.GLL","text":"GLL <: NMEAString\n\nA struct for handling NMEA message data of type GLL, which contains geographic position and time information.\n\nFields\n\nsystem::String: the name of the GNSS system that produced the data (e.g. \"GPS\", \"GLONASS\", etc.)\nlatitude::Float64: the latitude of the position in decimal degrees\nlongitude::Float64: the longitude of the position in decimal degrees\ntime::Float64: the UTC time of the position in seconds\nstatus::Bool: whether the position is valid (true) or not (false)\nmode::Char: the mode indicator of the position fix (e.g. 'A' for autonomous, 'D' for differential, etc.)\nvalid::Bool: whether the message data is valid (true) or not (false)\n\nConstructor\n\nThe constructor takes an array of strings as an argument, which should contain the fields of the GLL message in order, separated by commas. Optionally, a keyword argument system can be given to specify the GNSS system name, and a keyword argument valid can be given to indicate the validity of the message data. If not given, these arguments default to \"UNKNOWN\" and true, respectively.\n\nThe GLL message contains the latitude, longitude, time, and status of the position fix obtained by the receiver. The status indicates whether the position is valid or not, and the mode indicates whether the position is obtained autonomously, differentially, or by other means. The GLL message is useful for applications that need to know the exact location and time of the receiver.\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.GSA","page":"Home","title":"NMEAParser.GSA","text":"GSA(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true)\n\nA struct that represents a GNSS DOP and Active Satellites (GSA) sentence from the NMEA protocol. It contains information about the GPS system, mode, current mode, satellite IDs, position dilution of precision (PDOP), horizontal dilution of precision (HDOP), and vertical dilution of precision (VDOP).\n\nArguments\n\nitems::Array{D}: An array of strings that contains the fields of the GSA sentence, separated by commas.\nsystem::AbstractString: An optional keyword argument that specifies the type of GPS system used.\n\nIt can be \"GPS\", \"GLONASS\", \"GALILEO\", or \"Combined\". The default value is \"UNKNOWN\".\n\nvalid::Bool: An optional keyword argument that indicates whether the GSA sentence is valid or not. The default value is true.\n\nReturns\n\nA GSA object with the following fields:\nsystem::String: The type of GPS system used.\nmode::Char: The mode of operation. It can be 'A' for automatic or 'M' for manual.\ncurrent_mode::Int: The current mode of operation. It can be one of the following values: 1 for no fix, 2 for 2D fix, or 3 for 3D fix.\nsat_ids::Vector{Int}: A vector of integers that contains the IDs of the satellites used in the fix.\nPDOP::Float64: The position dilution of precision (PDOP) of the fix.\nHDOP::Float64: The horizontal dilution of precision (HDOP) of the fix.\nVDOP::Float64: The vertical dilution of precision (VDOP) of the fix.\nvalid::Bool: Whether the GSA sentence is valid or not.\n\nThe GSA sentence contains information about the GNSS DOP and active satellites. It indicates the mode of operation, the current mode of operation, the satellite IDs used in the fix, and the position dilution of precision (PDOP), horizontal dilution of precision (HDOP), and vertical dilution of precision (VDOP). The message ID for the GSA sentence is “GSA”. Here is an example of a GSA sentence:\n\n$GNGSA,A,3,21,5,29,25,12,10,26,2,,,,,1.2,0.7,1.0*27\n\nThis means that the GNSS receiver was in automatic mode and had a 3D fix using satellites with IDs 21, 5, 29, 25, 12, 10, 26, and 2. The PDOP was 1.2, the HDOP was 0.7, and the VDOP was 1.0\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.GSV","page":"Home","title":"NMEAParser.GSV","text":"GSV <: NMEAString\n\nA struct for handling NMEA message data of type GSV, which contains information about the GNSS satellites in view.\n\nFields\n\nsystem::String: the name of the GNSS system that produced the data (e.g. \"GPS\", \"GLONASS\", etc.)\nmsg_total::Int: the total number of GSV messages in this cycle\nmsg_num::Int: the sequence number of this message in this cycle\nsat_total::Int: the total number of satellites in view\nSV_data::Vector{Int}: an array of SVData structs, each containing information about one satellite in view\nvalid::Bool: whether the message data is valid (true) or not (false)\n\nConstructor\n\nThe constructor takes an array of strings as an argument, which should contain the fields of the GSV message in order, separated by commas. Optionally, a keyword argument system can be given to specify the GNSS system name, and a keyword argument valid can be given to indicate the validity of the message data. If not given, these arguments default to \"UNKNOWN\" and true, respectively.\n\nThe GSV message contains information about the satellites that are in view of the receiver, such as their PRN numbers, elevations, azimuths, and signal-to-noise ratios. The PRN number identifies the satellite uniquely within its system, and the elevation and azimuth indicate the direction of the satellite relative to the receiver. The signal-to-noise ratio measures the quality of the signal received from the satellite. The GSV message is useful for applications that need to know the availability and quality of the satellites that can be used for positioning\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.NMEAData","page":"Home","title":"NMEAParser.NMEAData","text":"NMEAData()\n\nA mutable struct that stores the last parsed NMEA messages of different types.\n\nFields\n\nlast_GGA::Union{Nothing, GGA}: the last GGA message parsed, or nothing if none\nlast_RMC::Union{Nothing, RMC}: the last RMC message parsed, or nothing if none\nlast_GSA::Union{Nothing, GSA}: the last GSA message parsed, or nothing if none\nlast_GSV::Union{Nothing, GSV}: the last GSV message parsed, or nothing if none\nlast_GBS::Union{Nothing, GBS}: the last GBS message parsed, or nothing if none\nlast_VTG::Union{Nothing, VTG}: the last VTG message parsed, or nothing if none\nlast_GLL::Union{Nothing, GLL}: the last GLL message parsed, or nothing if none\nlast_ZDA::Union{Nothing, ZDA}: the last ZDA message parsed, or nothing if none\nlast_DTM::Union{Nothing, DTM}: the last DTM message parsed, or nothing if none\nlast_PASHR::Union{Nothing, PASHR}: the last PASHR message parsed, or nothing if none\nlast_TWPOS::Union{Nothing, TWPOS}: the last TWPOS message parsed, or nothing if none\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.PASHR","page":"Home","title":"NMEAParser.PASHR","text":"PASHR(system, time, heading, heading_type, roll, pitch, heave, roll_accuracy,\n      pitch_accuracy, heading_accuracy, aiding_code, ins_code, valid)\n\nA struct that represents a PASHR NMEA string, which is a message that contains position and attitude data from an inertial navigation system (INS).\n\nFields\n\nsystem::String: The name of the system that produced the message.\ntime::Float64: The time of the message in seconds since midnight UTC.\nheading::Float64: The heading angle in degrees clockwise from north.\nheading_type::Char: The type of heading: 'T' for true or 'M' for magnetic.\nroll::Float64: The roll angle in degrees. Positive values indicate right roll.\npitch::Float64: The pitch angle in degrees. Positive values indicate nose up.\nheave::Float64: The heave displacement in meters. Positive values indicate upward motion.\nroll_accuracy::Float64: The standard deviation of the roll angle in degrees.\npitch_accuracy::Float64: The standard deviation of the pitch angle in degrees.\nheading_accuracy::Float64: The standard deviation of the heading angle in degrees.\naiding_code::Int: A code that indicates the type of aiding used by the INS.\nins_code::Int: A code that indicates the status of the INS.\nvalid::Bool: A flag that indicates whether the message is valid or not.\n\nConstructor\n\nThe constructor takes an array of strings as an argument, which are the items in the PASHR NMEA string. It also takes optional keyword arguments for the system name and the validity flag. It parses the items and assigns them to the corresponding fields.\n\nExample\n\n$PASHR,154155.50,153.17,T,9.68,2.29,-0.07,0.502,0.502,0.959,1*19\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.RMC","page":"Home","title":"NMEAParser.RMC","text":"RMC <: NMEAString\n\nA type that represents a Recommended Minimum Navigation Information (RMC) message, which is one of the most common types of NMEA messages. NMEA stands for National Marine Electronics Association, and it is a standard protocol for communication between marine electronic devices. An RMC message provides information about the position, velocity, time, date, and magnetic variation of a GPS receiver.\n\nFields\n\nsystem::String: The system identifier, indicating the source of the message (e.g. \"GPS\", \"GLONASS\", \"UNKNOWN\").\ntime::Float64: The UTC time of the position fix, in seconds since midnight.\nstatus::Bool: The status indicator, either true for active or false for void (invalid).\nlatitude::Float64: The latitude of the position, in decimal degrees.\nlongitude::Float64: The longitude of the position, in decimal degrees.\nsog::Float64: The speed over ground, in knots.\ncog::Float64: The track angle, in degrees true (not magnetic).\nday::String: The day of the position fix, in two digits.\nmonth::String: The month of the position fix, in two digits.\nyear::String: The year of the position fix, in two digits.\nmagvar::Float64: The magnetic variation, in degrees. A negative value indicates west and a positive value indicates east.\nmode::Char: The mode indicator, indicating the type of fix. It can be one of the following values:\n'A' for autonomous (GPS only)\n'D' for differential (DGPS)\n'E' for estimated\n'F' for float RTK\n'M' for manual input\n'N' for no fix\n'P' for precise\n'R' for real time kinematic\n'S' for simulator\nvalid::Bool: A flag indicating whether the message is valid or not.\n\nConstructor\n\nThe constructor takes an array of strings as an argument, which are the items of an RMC sentence. It also takes an optional keyword argument system, which specifies the system identifier. If not given, it defaults to \"UNKNOWN\". Another optional keyword argument is valid, which specifies whether the message is valid or not. If not given, it defaults to true.\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.SVData","page":"Home","title":"NMEAParser.SVData","text":"SVData <: NMEAString\n\nA struct for handling NMEA message data of type SVData, which contains information about one satellite in view of a GNSS receiver.\n\nFields\n\nPRN::Int: the PRN number of the satellite, which identifies it uniquely within its system\nelevation::Int: the elevation angle of the satellite in degrees, relative to the horizon\nazimuth::Int: the azimuth angle of the satellite in degrees, relative to the true north\nSNR::Int: the signal-to-noise ratio of the satellite in decibels, which measures the quality of the signal received from the satellite\n\nThe SVData struct is used to store and process information about one satellite that is in view of a GNSS receiver. It is usually part of a GSV message, which contains information about all the satellites in view. The SVData struct can be used to determine the availability and quality of the satellites that can be used for positioning.\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.TWPOS","page":"Home","title":"NMEAParser.TWPOS","text":"TWPOS(system, time, xpose, ypose, zpose, distance, velocity, valid)\n\nA struct that represents a TWPOS NMEA string, which is a message that contains the position and velocity data from a transponder.\n\nFields\n\nsystem::String: The name of the system that produced the message.\ntime::Float64: The time of the message in seconds since midnight UTC.\nxpose::Float64: The x-coordinate of the position in meters.\nypose::Float64: The y-coordinate of the position in meters.\nzpose::Float64: The z-coordinate of the position in meters.\ndistance::Float64: The distance from the origin in meters.\nvelocity::Float64: The velocity in meters per second.\nvalid::Bool: A flag that indicates whether the message is valid or not.\n\nConstructor\n\nThe constructor takes an array of strings as an argument, which are the items in the TWPOS NMEA string. It also takes optional keyword arguments for the system name and the validity flag. It parses the items and converts them to the appropriate units and assigns them to the corresponding fields.\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.VTG","page":"Home","title":"NMEAParser.VTG","text":"VTG <: NMEAString\n\nA type that represents a Track made good and speed over ground (VTG) message, which is one of the types of NMEA messages. NMEA stands for National Marine Electronics Association, and it is a standard protocol for communication between marine electronic devices. A VTG message provides information about the actual track made good and speed over ground of a GPS receiver.\n\nFields\n\nsystem::String: The system identifier, indicating the source of the message (e.g. \"GPS\", \"GLONASS\", \"UNKNOWN\").\nCoG_true::Float64: The track made good (degrees true).\nCoG_mag::Float64: The track made good (degrees magnetic).\nSoG_knots::Float64: The speed over ground, in knots.\nSoG_kmhr::Float64: The speed over ground, in kilometers per hour (kph).\nmode::Char: The mode indicator, indicating the type of fix. It can be one of the following values:\n'A' for autonomous (GPS only)\n'D' for differential (DGPS)\n'E' for estimated (dead reckoning) mode\n'M' for manual input mode\n'S' for simulator mode\n'N' for data not valid\nvalid::Bool: A flag indicating whether the message is valid or not.\n\nConstructor\n\nThe constructor takes an array of strings as an argument, which are the items of a VTG sentence. It also takes an optional keyword argument system, which specifies the system identifier. If not given, it defaults to \"UNKNOWN\". Another optional keyword argument is valid, which specifies whether the message is valid or not. If not given, it defaults to true.\n\nExample\n\nA message has the following format: $GPVTG,x.x,T,x.x,M,x.x,N,x.x,K,m*hh\n\nFor example, the following VTG message:\n\n$GPVTG,140.88,T,M,8.04,N,14.89,K,D*05\n\nMeans that:\n\nThe track made good is 140.88 degrees true.\nThe track made good is not available in degrees magnetic.\nThe speed over ground is 8.04 knots.\nThe speed over ground is 14.89 kph.\nThe mode indicator is differential (DGPS).\nThe checksum data is 05.\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.ZDA","page":"Home","title":"NMEAParser.ZDA","text":"ZDA(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true)\n\nA struct that represents a Time and Date (ZDA) sentence from the NMEA protocol. It contains information about the GPS system, time, date, and local time zone.\n\nArguments\n\nitems::Array{D}: An array of strings that contains the fields of the ZDA sentence, separated by commas.\nsystem::AbstractString: An optional keyword argument that specifies the type of GPS system used. It can be \"GPS\", \"GLONASS\", \"GALILEO\", or \"Combined\". The default value is \"UNKNOWN\".\nvalid::Bool: An optional keyword argument that indicates whether the ZDA sentence is valid or not. The default value is true.\n\nReturns\n\nA ZDA object with the following fields:\nsystem::String: The type of GPS system used.\ntime::Float64: The UTC time of the fix in seconds.\nday::Int: The day of the month (1-31).\nmonth::Int: The month of the year (1-12).\nyear::Int: The year (four digits).\nzone_hrs::Int: The local time zone offset from UTC in hours.\nzone_mins::Int: The local time zone offset from UTC in minutes.\nvalid::Bool: Whether the ZDA sentence is valid or not.\n\nAn example of a ZDA sentence is:\n\n$GPZDA,201530.00,04,07,2002,00,00*60\n\nThis means that the GPS system reported the date and time as 20:15:30.00 UTC on July 4th, 2002, with no local time zone offset1.\n\nThe purpose of the ZDA sentence is to provide a reliable and accurate source of date and time information for applications that require synchronization or logging. For example, some scientific instruments or sensors may need to record the exact time of their measurements or events. The ZDA sentence can also be used to adjust the internal clock of the receiver or other devices\n\n\n\n\n\n","category":"type"},{"location":"#Base.parse-Tuple{AbstractString}","page":"Home","title":"Base.parse","text":"parse(nmea_string::AbstractString)\n\nA function that parses a NMEA string, which is a standard format for data transmission from marine and navigation devices.\n\nArguments\n\nnmea_string::AbstractString: The NMEA string to be parsed.\n\nReturns\n\nA struct that represents the type and content of the NMEA string, such as DTM, GBS, GGA, GLL, GSA, GSV, RMC, VTG, ZDA, PASHR, or TWPOS. The struct has fields that correspond to the items in the NMEA string.\n\nErrors\n\nThrows an ArgumentError if the NMEA string is not supported or has an invalid format.\n\nAlgorithm\n\nThe function splits the NMEA string by the '*' character and checks the checksum of the message. It then splits the message by the ',' character and extracts the header and the items. It determines the system name from the header and calls the appropriate constructor for the corresponding struct type. If no matching struct type is found, it throws an ArgumentError.\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser._dms_to_dd-Tuple{SubString, SubString}","page":"Home","title":"NMEAParser._dms_to_dd","text":"_dms_to_dd(dms::SubString, hemi::SubString)\n\nConverts a string representing degrees, minutes and seconds (DMS) to decimal degrees.\n\nArguments\n\ndms: a substring representing degrees, minutes and seconds\nhemi: a substring representing the hemisphere\n\nReturns\n\ndec_degrees: the decimal degree representation of the input DMS\n\nExample\n\ndms = \"4807.038\"\nhemi = \"N\"\ndec_degrees = _dms_to_dd(dms, hemi)\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser._hms_to_secs-Tuple{SubString}","page":"Home","title":"NMEAParser._hms_to_secs","text":"_hms_to_secs(hms::SubString)\n\nConverts a string representing hours, minutes and seconds (HMS) to seconds.\n\nArguments\n\nhms: a substring representing hours, minutes and seconds\n\nReturns\n\nseconds: the number of seconds represented by the input HMS\n\nExample\n\nhms = \"123519\"\nseconds = _hms_to_secs(hms)\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.get_system-Tuple{SubString}","page":"Home","title":"NMEAParser.get_system","text":"get_system(mtype::SubString)\n\nDetermine the system type based on the input mtype.\n\nArguments\n\nmtype: A SubString representing the message type.\n\nReturns\n\nA string representing the system type. Possible values are \"GPS\", \"GLONASS\", \"GALILEO\", \"COMBINED\", and \"UNKNOWN\".\n\nExamples\n\nget_system(\"$GPGGA\") # \"GPS\"\nget_system(\"$GLGSV\") # \"GLONASS\"\nget_system(\"$GAGGA\") # \"GALILEO\"\nget_system(\"$GNGNS\") # \"COMBINED\"\nget_system(\"$PMTK\")  # \"UNKNOWN\"\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.parse_msg!-Tuple{NMEAData, AbstractString}","page":"Home","title":"NMEAParser.parse_msg!","text":"parse_msg!(s::NMEAData, line::AbstractString)\n\nParse a line of NMEA 0183 data and update the state of an NMEAData object.\n\nParameters\n\ns : NMEAData     An object that stores the parsed data from NMEA messages. line : AbstractString     A string that contains a valid NMEA 0183 message.\n\nReturns\n\nDataType     The type of the parsed message, or Nothing if the message is not supported.\n\nThrows\n\nArgumentError     If the line is not a valid NMEA 0183 message.\n\nExample\n\ns = NMEAData()\n\njulia> d = [ \"$GPRMC,154925.820,A,5209.732,N,00600.240,E,001.9,059.8,040123,000.0,W*7E\",\n            \"$GPGGA,154925.920,5209.732,N,00600.240,E,1,12,1.0,0.0,M,0.0,M,,*63\",\n            \"$GPGSA,A,3,01,02,03,04,05,06,07,08,09,10,11,12,1.0,1.0,1.0*30\",\n            \"$GPRMC,154925.920,A,5209.732,N,00600.240,E,001.9,059.8,040123,000.0,W*7F\"]\n4-element Vector{String}:\n \"$GPRMC,154925.820,A,5209.732,N,00600.240,E,001.9,059.8,040123,000.0,W*7E\"\n \"$GPGGA,154925.920,5209.732,N,00600.240,E,1,12,1.0,0.0,M,0.0,M,,*63\"\n \"$GPGSA,A,3,01,02,03,04,05,06,07,08,09,10,11,12,1.0,1.0,1.0*30\"\n \"$GPRMC,154925.920,A,5209.732,N,00600.240,E,001.9,059.8,040123,000.0,W*7F\"\n\n julia> for str in d\n            msg_type = parse_msg!(s, str)\n            println(msg_type)\n        end\n RMC\n GGA\n GSA\n RMC\n\n julia> s.last_RMC\n RMC(\"GPS\", 56965.92, true, 52.1622, 6.004, 1.9, 59.8, \"04\", \"01\", \"23\", -0.0, 'A', true)\n\n julia> s.last_GGA\n GGA(\"GPS\", 56965.92, 52.1622, 6.004, \"GPS (SPS)\", 12, 1.0, 0.0, 0.0, 0.0, 0, true)\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.pos_convert-Tuple{Char, Float64}","page":"Home","title":"NMEAParser.pos_convert","text":"pos_convert(flag::Char, value::Float64)::Float64\n\nA function that converts a position value from one unit to another.\n\nArguments\n\nflag::Char: The flag that indicates the original unit of the position value. Possible values are 'F' for feet, 'N' for miles, 'K' for kilometers, and 'M' for meters.\nvalue::Float64: The position value to be converted.\n\nReturns\n\nA Float64 that represents the position value in meters.\n\nErrors\n\nThrows an exception if the flag is not one of the supported values.\n\nAlgorithm\n\nThe function uses a simple formula to convert the position value based on the flag. For example, if the flag is 'F', it divides the value by 0.3048 to get the equivalent value in meters.\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.update!-Tuple{NMEAData, GGA}","page":"Home","title":"NMEAParser.update!","text":"update!(s::NMEAData, msg)\n\nUpdate the corresponding field of s with the given NMEA message msg.\n\nArguments\n\ns::NMEAData: the NMEA data struct to be updated\nmsg: an NMEA message of type GGA, RMC, GSA, GSV, GBS, VTG, GLL, ZDA, DTM, PASHR or TWPOS\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.vel_convert-Tuple{Char, Float64}","page":"Home","title":"NMEAParser.vel_convert","text":"vel_convert(flag::Char, value::Float64)::Float64\n\nA function that converts a velocity value from one unit to another.\n\nArguments\n\nflag::Char: The flag that indicates the original unit of the velocity value. Possible values are 'N' for knots, 'K' for kilometers per hour, and 'M' for meters per second.\nvalue::Float64: The velocity value to be converted.\n\nReturns\n\nA Float64 that represents the velocity value in meters per second.\n\nErrors\n\nThrows an exception if the flag is not one of the supported values.\n\nAlgorithm\n\nThe function uses a simple formula to convert the velocity value based on the flag. For example, if the flag is 'N', it multiplies the value by 1.94384449244 to get the equivalent value in meters per second.\n\n\n\n\n\n","category":"method"}]
}
