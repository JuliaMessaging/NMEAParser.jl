var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NMEAParser","category":"page"},{"location":"#NMEAParser","page":"Home","title":"NMEAParser","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NMEAParser.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NMEAParser]","category":"page"},{"location":"#NMEAParser.DTM","page":"Home","title":"NMEAParser.DTM","text":"struct DTM <: NMEAString\n\nDatum Reference (DTM)\n\nThis NMEA data type represents information about a datum reference.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\nlocal_datum_code::String: Local datum code.\nlocal_datum_subcode::String: Local datum subcode.\nlat_offset::Float64: Latitude offset in meters.\nlong_offset::Float64: Longitude offset in meters.\nalt_offset::Float64: Altitude offset in meters.\nref_datum::String: Reference datum.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nDTM(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = DTM([\"DTM\", \"W84\", \"W\", \"0.5\", \"W\", \"1.0\", \"M\", \"W84\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.GBS","page":"Home","title":"NMEAParser.GBS","text":"struct GBS <: NMEAString\n\nGNSS Satellite Fault Detection (GBS)\n\nThis NMEA data type represents information about satellite fault detection, including error estimates and probabilities.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\nlat_error::Float64: Latitude error estimate.\nlong_error::Float64: Longitude error estimate.\nalt_error::Float64: Altitude error estimate.\nfailed_PRN::Int: PRN of the failed satellite.\nprob_of_missed::Float64: Probability of missed detection.\nexcluded_meas_err::Float64: Excluded measurement error.\nstandard_deviation::Float64: Standard deviation of the measurements.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nGBS(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = GBS([\"GBS\", \"123456\", \"0.1\", \"0.2\", \"0.3\", \"5\", \"0.01\", \"0.05\", \"0.02\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.GGA","page":"Home","title":"NMEAParser.GGA","text":"struct GGA <: NMEAString\n\nGPS Fix Data (GGA)\n\nThis NMEA data type represents information about the GPS fix, including latitude, longitude, altitude, number of satellites, and accuracy measures.\n\nFields\n\nsystem::String: GPS, GLONASS, GALILEO, or Combined.\ntime::Float64: Time in seconds.\nlatitude::Float64: Latitude in decimal degrees.\nlongitude::Float64: Longitude in decimal degrees.\nfix_quality::String: Quality of the fix.\nnum_sats::Int: Number of satellites used in the fix.\nHDOP::Float64: Horizontal Dilution of Precision.\naltitude::Float64: Altitude above mean sea level (MSL) in meters.\ngeoidal_separation::Float64: Geoidal separation in meters.\nage_of_differential::Float64: Age of the differential data.\ndiff_reference_id::Int: Differential reference station ID.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nGGA(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = GGA([\"GGA\", \"123456\", \"123.456\", \"N\", \"987.654\", \"W\", \"1\", \"8\", \"0.9\", \"123.4\", \"M\", \"54.3\", \"M\", \"1\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.GLL","page":"Home","title":"NMEAParser.GLL","text":"struct GLL <: NMEAString\n\nGeographic Latitude and Longitude (GLL)\n\nThis NMEA data type represents information about geographic latitude and longitude.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\nlatitude::Float64: Latitude in decimal degrees.\nlongitude::Float64: Longitude in decimal degrees.\ntime::Float64: Time in seconds.\nstatus::Bool: Status indicator (true if valid fix, false otherwise).\nmode::Char: Mode indicator ('A' for autonomous mode).\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nGLL(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = GLL([\"GLL\", \"12.3456\", \"N\", \"98.7654\", \"W\", \"123456\", \"A\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.GSA","page":"Home","title":"NMEAParser.GSA","text":"struct GSA <: NMEAString\n\nGNSS DOP and Active Satellites (GSA)\n\nThis NMEA data type represents information about the GNSS Dilution of Precision (DOP) and the active satellites used for navigation.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\nmode::Char: Mode of operation (A = Automatic, M = Manual).\ncurrent_mode::Int: Operating mode (1 = Fix not available, 2 = 2D fix, 3 = 3D fix).\nsat_ids::Vector{Int}: Vector of satellite IDs used in the fix.\nPDOP::Float64: Position Dilution of Precision.\nHDOP::Float64: Horizontal Dilution of Precision.\nVDOP::Float64: Vertical Dilution of Precision.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nGSA(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = GSA([\"GSA\", \"M\", \"3\", \"1\", \"2\", \"3\", \"1.2\", \"0.9\", \"1.5\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.GSV","page":"Home","title":"NMEAParser.GSV","text":"struct GSV <: NMEAString\n\nSatellites in View (GSV)\n\nThis NMEA data type represents information about the satellites in view and their signal strength.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\nmsg_total::Int: Total number of GSV messages for this cycle.\nmsg_num::Int: Number of this GSV message.\nsat_total::Int: Total number of satellites in view.\nSV_data::Vector{SVData}: Vector of satellite data, each containing PRN, elevation, azimuth, and SNR.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nGSV(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = GSV([\"GSV\", \"3\", \"1\", \"9\", \"1\", \"01\", \"30\", \"45\", \"20\", \"02\", \"60\", \"180\", \"25\", \"03\", \"15\", \"300\", \"15\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.NMEAData","page":"Home","title":"NMEAParser.NMEAData","text":"NMEAData()\n\nA mutable struct that stores the last parsed NMEA messages of different types.\n\nFields\n\nlast_GGA::Union{Nothing, GGA}: the last GGA message parsed, or nothing if none\nlast_RMC::Union{Nothing, RMC}: the last RMC message parsed, or nothing if none\nlast_GSA::Union{Nothing, GSA}: the last GSA message parsed, or nothing if none\nlast_GSV::Union{Nothing, GSV}: the last GSV message parsed, or nothing if none\nlast_GBS::Union{Nothing, GBS}: the last GBS message parsed, or nothing if none\nlast_VTG::Union{Nothing, VTG}: the last VTG message parsed, or nothing if none\nlast_GLL::Union{Nothing, GLL}: the last GLL message parsed, or nothing if none\nlast_ZDA::Union{Nothing, ZDA}: the last ZDA message parsed, or nothing if none\nlast_DTM::Union{Nothing, DTM}: the last DTM message parsed, or nothing if none\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.PASHR","page":"Home","title":"NMEAParser.PASHR","text":"struct PASHR <: NMEAString\n\nInertial Attitude Data (PASHR)\n\nThis NMEA data type represents inertial attitude data, including heading, roll, pitch, and heave.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\nheading::Float64: Heading in decimal degrees.\nheading_type::Bool: True heading indicator (true if heading is relative to true north).\nroll::Float64: Roll in decimal degrees.\npitch::Float64: Pitch in decimal degrees.\nheave::Float64: Heave in meters.\nroll_accuracy::Float64: Roll accuracy (standard deviation in decimal degrees).\npitch_accuracy::Float64: Pitch accuracy (standard deviation in decimal degrees).\nheading_accuracy::Float64: Heading accuracy (standard deviation in decimal degrees).\naiding_code::Int: GPS Update Quality Flag (0 = No position, 1 = Non-RTK fixed, 2 = RTK fixed).\nins_code::Int: INS Status Flag (0 = Pre-Alignment, 1 = Post-Alignment).\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nPASHR(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = PASHR([\"PASHR\", \"123456\", \"45.0\", \"T\", \"15.0\", \"-10.0\", \"2.0\", \"0.1\", \"0.1\", \"0.2\", \"2\", \"1\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.PTACC","page":"Home","title":"NMEAParser.PTACC","text":"struct PTACC <: NMEAString\n\nIMU Accelerometer (PTACC)\n\nThis NMEA data type represents inertial measurement unit (IMU) accelerometer information.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\nx::Float64: Acceleration in the X-axis.\ny::Float64: Acceleration in the Y-axis.\nz::Float64: Acceleration in the Z-axis.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nPTACC(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = PTACC([\"PTACC\", \"123456\", \"0.5\", \"1.0\", \"-0.2\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.PTGYR","page":"Home","title":"NMEAParser.PTGYR","text":"struct PTGYR <: NMEAString\n\nIMU Gyroscope (PTGYR)\n\nThis NMEA data type represents inertial measurement unit (IMU) gyroscope information.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\nx::Float64: Angular velocity around the X-axis.\ny::Float64: Angular velocity around the Y-axis.\nz::Float64: Angular velocity around the Z-axis.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nPTGYR(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = PTGYR([\"PTGYR\", \"123456\", \"0.1\", \"-0.2\", \"0.5\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.PTWHPR","page":"Home","title":"NMEAParser.PTWHPR","text":"struct PTWHPR <: NMEAString\n\nIMU Heading Pitch Roll (PTWHPR)\n\nThis NMEA data type represents inertial measurement unit (IMU) information, including heading, pitch, and roll.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\nheading::Float64: Heading in degrees.\npitch::Float64: Pitch in degrees.\nroll::Float64: Roll in degrees.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nPTWHPR(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = PTWHPR([\"PTWHPR\", \"123456\", \"90.0\", \"30.0\", \"-45.0\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.PTWPLS","page":"Home","title":"NMEAParser.PTWPLS","text":"struct PTWPLS <: NMEAString\n\nPosition in Pulses (PTWPLS)\n\nThis NMEA data type represents position information in pulses.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\nx::Float64: X position in pulses.\ny::Float64: Y position in pulses.\nheading::Float64: Heading in degrees.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nPTWPLS(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = PTWPLS([\"PTWPLS\", \"123456\", \"500\", \"P\", \"750\", \"P\", \"90.0\", \"D\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.PTWPOS","page":"Home","title":"NMEAParser.PTWPOS","text":"struct PTWPOS <: NMEAString\n\nPosition (PTWPOS)\n\nThis NMEA data type represents position information.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\nxpose::Float64: X position in meters.\nypose::Float64: Y position in meters.\nzpose::Float64: Z position in meters.\ndistance::Float64: Distance in meters.\nvelocity::Float64: Velocity in kilometers per hour.\ndirection::Char: Direction indicator ('F' for forward, 'B' for backward).\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nPTWPOS(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = PTWPOS([\"PTWPOS\", \"123456\", \"45.678\", \"M\", \"123.456\", \"M\", \"789.012\", \"M\", \"456.789\", \"M\", \"5.0\", \"K\", \"F\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.PTWVCT","page":"Home","title":"NMEAParser.PTWVCT","text":"struct PTWVCT <: NMEAString\n\nMovement Vector (PTWVCT)\n\nThis NMEA data type represents movement vector information.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\ndistance_derivative::Float64: Distance derivative in meters.\nheading::Float64: Heading in radians.\ndistance::Float64: Distance in meters.\nspeed::Float64: Speed in meters per second.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nPTWVCT(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = PTWVCT([\"PTWVCT\", \"123456\", \"2.0\", \"M\", \"1.5708\", \"R\", \"5.0\", \"M\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.PTWWHE","page":"Home","title":"NMEAParser.PTWWHE","text":"struct PTWWHE <: NMEAString\n\nWheels Information (PTWWHE)\n\nThis NMEA data type represents wheels information.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\nlw_pulses::Float64: Left wheel pulses.\nlw_distance::Float64: Left wheel distance in meters.\nlw_direction::Char: Left wheel direction indicator ('F' for forward, 'B' for backward).\nrw_pulses::Float64: Right wheel pulses.\nrw_distance::Float64: Right wheel distance in meters.\nrw_direction::Char: Right wheel direction indicator ('F' for forward, 'B' for backward).\nheading::Float64: Heading.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nPTWWHE(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = PTWWHE([\"PTWWHE\", \"123456\", \"500\", \"100.0\", \"M\", \"F\", \"750\", \"150.0\", \"M\", \"B\", \"90.0\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.RMC","page":"Home","title":"NMEAParser.RMC","text":"struct RMC <: NMEAString\n\nRecommended Minimum Navigation Information (RMC)\n\nThis NMEA data type represents recommended minimum navigation information.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\nstatus::Bool: Status indicator (true if valid fix, false otherwise).\nlatitude::Float64: Latitude in decimal degrees.\nlongitude::Float64: Longitude in decimal degrees.\nsog::Float64: Speed over ground in knots.\ncog::Float64: Course over ground in degrees.\nday::String: Day of the month.\nmonth::String: Month of the year.\nyear::String: Year.\nmagvar::Float64: Magnetic variation.\nmode::Char: Mode indicator ('A' for autonomous mode).\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nRMC(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = RMC([\"RMC\", \"123456\", \"A\", \"12.3456\", \"N\", \"98.7654\", \"W\", \"5.0\", \"90.0\", \"150225\", \"5.0\", \"W\", \"A\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.VTG","page":"Home","title":"NMEAParser.VTG","text":"struct VTG <: NMEAString\n\nTrack Made Good and Ground Speed (VTG)\n\nThis NMEA data type represents information about the track made good (course) and ground speed.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\nCoG_true::Float64: Course over ground in true degrees.\nCoG_mag::Float64: Course over ground in magnetic degrees.\nSoG_knots::Float64: Speed over ground in knots.\nSoG_kmhr::Float64: Speed over ground in kilometers per hour.\nmode::Char: Mode indicator ('A' for autonomous mode).\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nVTG(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = VTG([\"VTG\", \"90.0\", \"T\", \"45.0\", \"M\", \"5.0\", \"K\", \"A\"])\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.ZDA","page":"Home","title":"NMEAParser.ZDA","text":"struct ZDA <: NMEAString\n\nTime and Date (ZDA)\n\nThis NMEA data type represents information about the current time and date from a GNSS receiver.\n\nFields\n\nsystem::String: GNSS system identifier (e.g., GPS, GLONASS, GALILEO, Combined).\ntime::Float64: Time in seconds.\nday::Int: Day of the month.\nmonth::Int: Month of the year.\nyear::Int: Year.\nzone_hrs::Int: Time zone offset in hours.\nzone_mins::Int: Time zone offset in minutes.\nvalid::Bool: Flag indicating the validity of the data.\n\nConstructor\n\nZDA(items::Array{D}; system::AbstractString = \"UNKNOWN\", valid = true) where D <: SubString\n\nExamples\n\ndata = ZDA([\"ZDA\", \"123456\", \"15\", \"02\", \"2024\", \"5\", \"30\"])\n\n\n\n\n\n","category":"type"},{"location":"#Base.pop!-Tuple{NMEAData, Type{GGA}}","page":"Home","title":"Base.pop!","text":"pop!(nmea_data::NMEAData, ::Type{T}) where T <: NMEAString\n\nPop the last received message of type T from the NMEAData object nmea_data and return it. If no message of type T has been received, throw an UndefVarError. This function extends the Base.pop! function for NMEAData objects.\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser._dms_to_dd-Tuple{SubString, SubString}","page":"Home","title":"NMEAParser._dms_to_dd","text":"_dms_to_dd(dms::SubString, hemi::SubString)\n\nConverts a string representing degrees, minutes and seconds (DMS) to decimal degrees.\n\nArguments\n\ndms: a substring representing degrees, minutes and seconds\nhemi: a substring representing the hemisphere\n\nReturns\n\ndec_degrees: the decimal degree representation of the input DMS\n\nExample\n\ndms = \"4807.038\"\nhemi = \"N\"\ndec_degrees = _dms_to_dd(dms, hemi)\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser._hms_to_secs-Tuple{SubString}","page":"Home","title":"NMEAParser._hms_to_secs","text":"_hms_to_secs(hms::SubString)\n\nConverts a string representing hours, minutes and seconds (HMS) to seconds.\n\nArguments\n\nhms: a substring representing hours, minutes and seconds\n\nReturns\n\nseconds: the number of seconds represented by the input HMS\n\nExample\n\nhms = \"123519\"\nseconds = _hms_to_secs(hms)\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.get_system-Tuple{SubString}","page":"Home","title":"NMEAParser.get_system","text":"get_system(mtype::SubString)\n\nDetermine the system type based on the input mtype.\n\nArguments\n\nmtype: A SubString representing the message type.\n\nReturns\n\nA string representing the system type. Possible values are \"GPS\", \"GLONASS\", \"GALILEO\", \"COMBINED\", and \"UNKNOWN\".\n\nExamples\n\nget_system(\"$GPGGA\") # \"GPS\"\nget_system(\"$GLGSV\") # \"GLONASS\"\nget_system(\"$GAGGA\") # \"GALILEO\"\nget_system(\"$GNGNS\") # \"COMBINED\"\nget_system(\"$PMTK\")  # \"UNKNOWN\"\n\nTODO: update get_system to cover all common system types AI = Alarm Indicator, (AIS?) AP = Auto Pilot (pypilot?) BD = BeiDou (China) CD = Digital Selective Calling (DSC) EC = Electronic Chart Display & Information System (ECDIS) GA = Galileo Positioning System GB = BeiDou (China) GI = NavIC, IRNSS (India) GL = GLONASS, according to IEIC 61162-1 GN = Combination of multiple satellite systems (NMEA 1083) GP = Global Positioning System receiver GQ = QZSS regional GPS augmentation system (Japan) HC = Heading/Compass HE = Gyro, north seeking II = Integrated Instrumentation IN = Integrated Navigation LC = Loran-C receiver (obsolete) Pxxx = Proprietary (Vendor specific) PQ = QZSS (Quectel Quirk) QZ = QZSS regional GPS augmentation system (Japan) SD = Depth Sounder ST = Skytraq TI = Turn Indicator YX = Transducer WI = Weather Instrument\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.is_string_supported-Tuple{AbstractString}","page":"Home","title":"NMEAParser.is_string_supported","text":"is_string_supported(nmea_string::AbstractString)\n\nCheck if the input NMEA string type is supported.\n\nArguments\n\nnmea_string::AbstractString: The NMEA string to be checked.\n\nReturns\n\nBool: true if the NMEA string is supported, false otherwise.\n\nExample\n\njulia> is_string_supported(\"$GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47\")\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.nmea_parse-Tuple{AbstractString}","page":"Home","title":"NMEAParser.nmea_parse","text":"nmea_parse(nmea_string::AbstractString; validate_checksum=true)\n\nParse an NMEA string and generate the corresponding NMEA type.\n\nThis function takes an NMEA sentence as input, validates the checksum if validate_checksum is set to true, and then parses the sentence based on the predefined headers and types in NMEA_TYPES.\n\nArguments\n\nnmea_string::AbstractString: The NMEA sentence to parse.\nvalidate_checksum::Bool: Flag to indicate whether to validate the checksum (default is true).\n\nReturns\n\nAn instance of the appropriate NMEA type.\n\nExamples\n\nresult = nmea_parse(\"$GGA,123456,123.456,N,987.654,W,1,8,0.9,123.4,M,54.3,M,1,\")\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.parse_msg!-Tuple{NMEAData, AbstractString}","page":"Home","title":"NMEAParser.parse_msg!","text":"parse_msg!(s::NMEAData, line::AbstractString)\n\nParse a line of NMEA 0183 data and update the state of an NMEAData object.\n\nArguments\n\ns : NMEAData \tAn object that stores the parsed data from NMEA messages. line : AbstractString \tA string that contains a valid NMEA 0183 message.\n\nReturns\n\nDataType \tThe type of the parsed message, or Nothing if the message is not supported.\n\nErrors\n\nArgumentError \tIf the line is not a valid NMEA 0183 message.\n\nExample\n\ns = NMEAData()\n\njulia> d = [ \"$GPRMC,154925.820,A,5209.732,N,00600.240,E,001.9,059.8,040123,000.0,W*7E\",\n\t\t\t\"$GPGGA,154925.920,5209.732,N,00600.240,E,1,12,1.0,0.0,M,0.0,M,,*63\",\n\t\t\t\"$GPGSA,A,3,01,02,03,04,05,06,07,08,09,10,11,12,1.0,1.0,1.0*30\",\n\t\t\t\"$GPRMC,154925.920,A,5209.732,N,00600.240,E,001.9,059.8,040123,000.0,W*7F\"]\n4-element Vector{String}:\n \"$GPRMC,154925.820,A,5209.732,N,00600.240,E,001.9,059.8,040123,000.0,W*7E\"\n \"$GPGGA,154925.920,5209.732,N,00600.240,E,1,12,1.0,0.0,M,0.0,M,,*63\"\n \"$GPGSA,A,3,01,02,03,04,05,06,07,08,09,10,11,12,1.0,1.0,1.0*30\"\n \"$GPRMC,154925.920,A,5209.732,N,00600.240,E,001.9,059.8,040123,000.0,W*7F\"\n\n julia> for str in d\n\t\t\tmsg_type = parse_msg!(s, str)\n\t\t\tprintln(msg_type)\n\t\tend\n RMC\n GGA\n GSA\n RMC\n\n julia> s.last_RMC\n RMC(\"GPS\", 56965.92, true, 52.1622, 6.004, 1.9, 59.8, \"04\", \"01\", \"23\", -0.0, 'A', true)\n\n julia> s.last_GGA\n GGA(\"GPS\", 56965.92, 52.1622, 6.004, \"GPS (SPS)\", 12, 1.0, 0.0, 0.0, 0.0, 0, true)\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.pos_convert-Tuple{Char, Float64}","page":"Home","title":"NMEAParser.pos_convert","text":"pos_convert(flag::Char, value::Float64)::Float64\n\nA function that converts a position value from one unit to another.\n\nArguments\n\nflag::Char: The flag that indicates the original unit of the position value. Possible values are 'F' for feet, 'N' for miles, 'K' for kilometers, and 'M' for meters.\nvalue::Float64: The position value to be converted.\n\nReturns\n\nA Float64 that represents the position value in meters.\n\nErrors\n\nThrows an exception if the flag is not one of the supported values.\n\nAlgorithm\n\nThe function uses a simple formula to convert the position value based on the flag. For example, if the flag is 'F', it divides the value by 0.3048 to get the equivalent value in meters.\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.update!-Tuple{NMEAData, GGA}","page":"Home","title":"NMEAParser.update!","text":"update!(s::NMEAData, msg)\n\nUpdate the corresponding field of s with the given NMEA message msg.\n\nArguments\n\ns::NMEAData: the NMEA data struct to be updated\nmsg: an NMEA message of type GGA, RMC, GSA, GSV, GBS, VTG, GLL, ZDA, DTM\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.update-Tuple{GGA, NMEAData}","page":"Home","title":"NMEAParser.update","text":"update(msg::T, s::NMEAData) where T <: NMEAString\n\nUpdate the last received message of type T in the NMEAData object s with the given message msg. Return the updated NMEAData object s.\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.vel_convert-Tuple{Char, Float64}","page":"Home","title":"NMEAParser.vel_convert","text":"vel_convert(flag::Char, value::Float64)::Float64\n\nA function that converts a velocity value from one unit to another.\n\nArguments\n\nflag::Char: The flag that indicates the original unit of the velocity value. Possible values are 'N' for knots, 'K' for kilometers per hour, and 'M' for meters per second.\nvalue::Float64: The velocity value to be converted.\n\nReturns\n\nA Float64 that represents the velocity value in meters per second.\n\nErrors\n\nThrows an exception if the flag is not one of the supported values.\n\nAlgorithm\n\nThe function uses a simple formula to convert the velocity value based on the flag.\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.@do_parse-NTuple{5, Any}","page":"Home","title":"NMEAParser.@do_parse","text":"@do_parse(headers, header_str, items, system, valid)\n\nMacro for parsing NMEA sentences based on predefined headers.\n\nThis macro generates code to match the given header_str against a list of regular expressions provided in the headers tuple. For each matching header, it generates code to call the corresponding type constructor with the relevant information from the NMEA sentence.\n\nArguments\n\nheaders::Tuple: A tuple containing pairs of regular expressions and corresponding NMEA types.\nheader_str::AbstractString: The NMEA sentence header string.\nitems::AbstractString: The NMEA sentence items.\nsystem::AbstractString: The system identifier.\nvalid::Bool: A boolean indicating whether the NMEA sentence is valid.\n\nExamples\n\n@do_parse NMEA_TYPES header items system valid\n\n\n\n\n\n","category":"macro"}]
}
