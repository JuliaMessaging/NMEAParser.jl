var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = NMEAParser","category":"page"},{"location":"#NMEAParser","page":"Home","title":"NMEAParser","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for NMEAParser.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [NMEAParser]","category":"page"},{"location":"#NMEAParser.GGA","page":"Home","title":"NMEAParser.GGA","text":"GGA(sys::AbstractString)\n\nA mutable struct representing a GGA (Global Positioning System Fix Data) message.\n\nFields\n\nsystem: GPS, GLONASS, GALILEO, or Combined.\ntime: Time in seconds.\nlatitude: Latitude in decimal degrees.\nlongitude: Longitude in decimal degrees.\nfix_quality: Quality of the fix.\nnum_sats: Number of satellites used in the fix.\nHDOP: Horizontal Dilution of Precision.\naltitude: Altitude above Mean Sea Level in meters.\ngeoidal_seperation: Geoidal separation in meters.\nage_of_differential: Age of differential data in seconds since last SC104 type 1 or 9 update.\ndiff_reference_id: Differential reference station ID.\nvalid: Whether the data is valid.\n\nConstructor\n\nThe constructor takes one argument:\n\nsys::AbstractString: The system type (GPS, GLONASS, GALILEO, or Combined).\n\nExamples\n\ngga = GGA(\"GPS\")\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.NMEAData","page":"Home","title":"NMEAParser.NMEAData","text":"NMEAData()\n\nA mutable struct representing NMEA data.\n\nFields\n\nlast_GGA::GGA: The last GGA message received.\nlast_RMC::RMC: The last RMC message received.\nlast_GSA::GSA: The last GSA message received.\nlast_GSV::GSV: The last GSV message received.\nlast_GBS::GBS: The last GBS message received.\nlast_VTG::VTG: The last VTG message received.\nlast_GLL::GLL: The last GLL message received.\nlast_ZDA::ZDA: The last ZDA message received.\nlast_DTM::DTM: The last DTM message received.\nlast_PASHR::PASHR: The last PASHR message received.\nlast_TWPOS::TWPOS: The last TWPOS message received.\n\nConstructor\n\nThe constructor takes no arguments and initializes all fields to their respective types with the system set to \"UNKNOWN\".\n\nExamples\n\nnmea_data = NMEAData()\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser.TWPOS","page":"Home","title":"NMEAParser.TWPOS","text":"mutable struct TWPOS\n\nA mutable structure representing a TWPOS sentence from a GPS system.\n\nFields\n\nsystem: the GPS system\ntime: the time of the sentence\nxpose: the x position\nypose: the y position\nzpose: the z position\ndistance: the distance\nvelocity: the velocity\nvalid: a boolean indicating if the sentence is valid\n\nConstructor\n\nTWPOS(sys::AbstractString)\n\nConstructs a new instance of the TWPOS type with the given GPS system.\n\nExample\n\nsys = \"GPS\"\nTWPOS_data = TWPOS(sys)\n\n\n\n\n\n","category":"type"},{"location":"#NMEAParser._dms_to_dd-Tuple{SubString, SubString}","page":"Home","title":"NMEAParser._dms_to_dd","text":"_dms_to_dd(dms::SubString, hemi::SubString)\n\nConverts a string representing degrees, minutes and seconds (DMS) to decimal degrees.\n\nArguments\n\ndms: a substring representing degrees, minutes and seconds\nhemi: a substring representing the hemisphere\n\nReturns\n\ndec_degrees: the decimal degree representation of the input DMS\n\nExample\n\ndms = \"4807.038\"\nhemi = \"N\"\ndec_degrees = _dms_to_dd(dms, hemi)\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser._hms_to_secs-Tuple{SubString}","page":"Home","title":"NMEAParser._hms_to_secs","text":"_hms_to_secs(hms::SubString)\n\nConverts a string representing hours, minutes and seconds (HMS) to seconds.\n\nArguments\n\nhms: a substring representing hours, minutes and seconds\n\nReturns\n\nseconds: the number of seconds represented by the input HMS\n\nExample\n\nhms = \"123519\"\nseconds = _hms_to_secs(hms)\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.get_system-Tuple{SubString}","page":"Home","title":"NMEAParser.get_system","text":"get_system(mtype::SubString)\n\nDetermine the system type based on the input mtype.\n\nArguments\n\nmtype: A SubString representing the message type.\n\nReturns\n\nA string representing the system type. Possible values are \"GPS\", \"GLONASS\", \"GALILEO\", \"COMBINED\", and \"UNKNOWN\".\n\nExamples\n\nget_system(\"$GPGGA\") # \"GPS\"\nget_system(\"$GLGSV\") # \"GLONASS\"\nget_system(\"$GAGGA\") # \"GALILEO\"\nget_system(\"$GNGNS\") # \"COMBINED\"\nget_system(\"$PMTK\")  # \"UNKNOWN\"\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.parse-Tuple{AbstractString}","page":"Home","title":"NMEAParser.parse","text":"parse(line::AbstractString)\n\nParses an NMEA sentence, returning a corresponding type.\n\nArguments\n\nline::AbstractString\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.parse_GGA-Union{Tuple{T}, Tuple{Array{T}, AbstractString}} where T<:SubString","page":"Home","title":"NMEAParser.parse_GGA","text":"parse_GGA(items::Array{T}, system::AbstractString) where T <: SubString\n\nParse an array of substrings items representing a GGA sentence from a GPS system.\n\nArguments\n\nitems: an array of substrings representing the fields of a GGA sentence\nsystem: a string representing the GPS system\n\nReturns\n\nGGA_data: an instance of the GGA type containing the parsed data\n\nExample\n\nitems = [\"$GPGGA\", \"123519\", \"4807.038\", \"N\", \"01131.000\", \"E\", \"1\", \"08\", \"0.9\", \"545.4\", \"M\", \"46.9\", \"M\", \"\", \"\"]\nsystem = \"GPS\"\nGGA_data = parse_GGA(items, system)\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.parse_TWPOS-Union{Tuple{T}, Tuple{Array{T}, AbstractString}} where T<:SubString","page":"Home","title":"NMEAParser.parse_TWPOS","text":"parse_TWPOS(items::Array{T}, system::AbstractString) where T<:SubString\n\nParse an array of substrings items representing a TWPOS sentence from a GPS system.\n\nArguments\n\nitems: an array of substrings representing the fields of a TWPOS sentence\nsystem: a string representing the GPS system\n\nReturns\n\nTWPOS_data: an instance of the TWPOS type containing the parsed data\n\nExample\n\nitems = [\"$GPTWPOS\", \"123519\", \"4807.038\", \"M\", \"01131.000\", \"M\", \"545.4\", \"M\", \"46.9\", \"M\", \"0.9\", \"K\"]\nsystem = \"GPS\"\nTWPOS_data = parse_TWPOS(items, system)\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.parse_msg!-Tuple{NMEAData, AbstractString}","page":"Home","title":"NMEAParser.parse_msg!","text":"parse_msg!(s::NMEAData, line::AbstractString)\n\nParses an NMEA sentence and updates the corresponding field in the NMEAData struct.\n\nArguments\n\ns::NMEAData: The NMEAData struct to update.\nline::AbstractString: The NMEA sentence to parse.\n\nReturns\n\nReturns the type of message parsed as a string.\n\nExamples\n\nnmea_data = NMEAData()\nparse_msg!(nmea_data, \"$GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47\")\n\nNotes\n\nThe function supports parsing of DTM, GBS, GGA, GLL, GNS, GSA, GSV, RMC, VTG, ZDA, PASHR and TWPOS messages.\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.pos_convert-Tuple{Char, Float64}","page":"Home","title":"NMEAParser.pos_convert","text":"pos_convert(Flag, Value)\n\nConvert a position Value to a different measurement system based on flag.\n\n\n\n\n\n","category":"method"},{"location":"#NMEAParser.vel_convert-Tuple{Char, Float64}","page":"Home","title":"NMEAParser.vel_convert","text":"vel_convert(Flag, Value)\n\nConvert a velocity Value to a different measurement system based on flag.\n\n\n\n\n\n","category":"method"}]
}
